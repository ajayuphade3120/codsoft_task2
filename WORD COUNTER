package application;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.*;
import java.util.*;

public class WordCountGUI extends Application {

    private TextArea inputTextArea;
    private Label resultLabel;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Word Count Tool");

        BorderPane root = new BorderPane();

        // Create UI components
        Label inputLabel = new Label("Enter text or open a file:");
        inputTextArea = new TextArea();
        Button openButton = new Button("Open File");
        Button countButton = new Button("Count Words");
        resultLabel = new Label();

        // Layout
        VBox vbox = new VBox(10, inputLabel, inputTextArea, openButton, countButton, resultLabel);
        root.setCenter(vbox);

        // Event handlers
        openButton.setOnAction(e -> openFile(primaryStage));
        countButton.setOnAction(e -> countWords());

        // Create scene
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void openFile(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));
        File file = fileChooser.showOpenDialog(stage);

        if (file != null) {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
                inputTextArea.setText(content.toString());
                countWords();
            } catch (IOException e) {
                showError("Error reading file: " + e.getMessage());
            }
        }
    }

    private void countWords() {
        String text = inputTextArea.getText();
        String[] words = text.split("\\s+|\\p{Punct}");

        Set<String> stopWords = new HashSet<>(Arrays.asList(
                "the", "and", "in", "to", "of", "a", "is", "it", "that", "with", "as", "on", "for", "at", "by", "an"));

        int wordCount = 0;
        Map<String, Integer> wordFrequency = new HashMap<>();
        for (String word : words) {
            if (!word.isEmpty() && !stopWords.contains(word.toLowerCase())) {
                wordCount++;
                wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
            }
        }

        StringBuilder result = new StringBuilder();
        result.append("Total words: ").append(wordCount).append("\n")
                .append("Unique words: ").append(wordFrequency.size()).append("\n\n")
                .append("Word frequency:\n");

        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            result.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }

        resultLabel.setText(result.toString());
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
